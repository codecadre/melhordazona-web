{:paths ["public/src/clj/" "public/config_files" "src/clj/" "recepies" "test/" "aggregate-transform-load/src/clj"]
 :pods {tzzh/mail {:version "0.0.2"}
        retrogradeorbit/bootleg {:version "0.1.9"}}
 :deps {com.github.askonomm/clarktown {:mvn/version "1.1.2"}
        markdown-clj/markdown-clj {:mvn/version "1.11.1"}}
 :tasks
 {:enter (println "Entering:" (:name (current-task)) " - " (:doc (current-task)) " With args: " *command-line-args* )
  :requires ([babashka.fs :as fs]
             [babashka.process :as p :refer [process]]
             [babashka.wait :as wait])
  nrepl (let [port (with-open [sock (java.net.ServerSocket. 0)] (.getLocalPort sock))
              proc (process (str "bb nrepl-server " port) {:inherit true})]
          (wait/wait-for-port "localhost" port)
          (spit ".nrepl-port" port)
          (fs/delete-on-exit ".nrepl-port")
          (deref proc))
  beautify {:doc "pretty print html document. pass filepath as first arg."
            :task (shell (format "./node_modules/js-beautify/js/bin/html-beautify.js %s  -r -s 2 -d"
                                 "public/**/*.html"))}
  md-to-html {:doc "renders html from markdown. First arg is md path."
              :task (shell "bb -m pages" (first *command-line-args*))}
  pages {:doc "Renders static pages, blog and other"
         :task (doseq [file (fs/glob "pages-md" "*.md")]
                 (let [md-filename (fs/file-name file)
                       filename-no-ext (first (clojure.string/split md-filename (re-pattern ".md")))
                       html-file-location (format "public/%s/index.html" filename-no-ext)]

                   (binding [*command-line-args* (list (str file))]
                     (run 'md-to-html))
                   (run 'beautify)))}
  sitemap {:doc "builds sitemap.txt"
           :task (shell "bb src/clj/sitemap.clj")}
  cp7-addresses-geocoding {:doc "geocodes addresses with esri. Pass n or nil to control the number of cp7 done."
                          :task cp7/-main}
  produce-data {:doc "Produces a lot of things... TODO complete description"
                :task produce-full-dataset/-main}
  web-data {:doc "propagates data changes from last step to web components"
            :task (shell "bb src/clj/web_data.clj")}}
 }
