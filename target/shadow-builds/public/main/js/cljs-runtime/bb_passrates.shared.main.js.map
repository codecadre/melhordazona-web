{"version":3,"sources":["bb_passrates/shared/main.cljc"],"mappings":"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","names":["bb-passrates.shared.main/clean-q","q","words","clojure.string/lower-case","clojure.string/replace","clojure.string.split","cljs.core.remove","cljs.core/empty?","bb-passrates.shared.main/query-place-list","list","cljs.core.apply","cljs.core/str","cljs.core.interpose","p1__28845#","cljs.core.filter","clojure.string/includes?","bb-passrates.shared.main/lang","bb-passrates.shared.main/seo","bb-passrates.shared.main/url->canonical","clojure.set/map-invert","p__28847","map__28848","cljs.core/--destructure-map","cljs.core.get","bb-passrates.shared.main/build-href","path","lang","foo","qs","cljs.core/nil?","p1__28846#","cljs.core.map","clojure.string.join","cljs.core._EQ_","cljs.core/count","cljs.core.into","cljs.core/List","bb-passrates.shared.main/url->params","s","word-list","p1__28849#","word-set","cljs.core/set","cljs.core/contains?","cljs.core.nth","cljs.core/first","bb-passrates.shared.main/query-string->map","query-string","p1__28850#","p1__28851#","cljs.core.reduce","p__28852","vec__28853","acc","k","v","cljs.core.assoc","cljs.core.keyword","bb-passrates.shared.main/url->map","url","cljs.core.merge"],"sourcesContent":["(ns bb-passrates.shared.main\n  (:require [clojure.string :as clj-str]\n            [clojure.set :refer [map-invert]]))\n\n(defn clean-q\n  \"Allow:\n  - alphanumeric\n  - spaces\n  - comma: ','\n  \"\n  [q]\n  (let [words (-> q\n                  clj-str/lower-case\n                  (clj-str/replace #\"[^0-9a-z_ ]\" \"\")\n                  (clj-str/split #\" \"))]\n    (remove empty? words)))\n\n(defn query-place-list [list q]\n  (let [q (apply str (interpose \" \" (clean-q q)))]\n    (filter #(clj-str/includes? (:search-field %) q) list)))\n\n\n(def lang :pt)\n\n(def seo\n  {\"district\" \"distritos\"\n   \"municipality\" \"municipios\"\n   \"city\" \"cidades\"})\n\n(def url->canonical\n  (map-invert seo))\n\n\n\n(defn build-href\n  \"builds href taking into account a variable number of query strings\"\n  [path {:keys [url/lang url/foo]}]\n  (let [qs (->> [(when lang\n                  [\"lang\" lang])\n                (when foo\n                  [\"foo\" foo])]\n                (remove nil?)\n                (map #(clj-str/join \"=\" %)))]\n    (cond\n      (= nil foo lang) path\n      (> (count qs) 1) (apply str (into (interpose \"&\" qs) (list \"?\" path)))\n      :else (apply str (into qs (list \"?\" path))))))\n\n(comment\n  ;;tests\n  (= \"/path?foo=bar\"\n     (build-href \"/path\" {:url/lang nil\n                      :url/foo \"bar\"}))\n\n  (= \"/?lang=pt&foo=bar\"\n     (build-href \"/\" {:url/lang \"pt\"\n                      :url/foo \"bar\"}))\n\n  (= \"/\"\n     (build-href \"/\" {:url/lang nil\n                      :url/foo nil})))\n\n(defn url->params [s]\n  (let [word-list (->> (clj-str/split s #\"/\")\n                       (remove empty?)\n                       (remove #(clj-str/includes? % \"?\")))\n        word-set (set word-list)]\n    (cond\n      (empty? word-set) {:url/home true}\n      (contains? word-set \"cidades\") {:url/city (nth word-list 1)\n                                      :url/type :city}\n      (contains? word-set \"distritos\") {:url/district (nth word-list 1)\n                                        :url/type :district}\n      (contains? word-set \"municipios\") {:url/municipality (nth word-list 1)\n                                         :url/type :municipality}\n      (contains? word-set \"escolas\") {:url/school (nth word-list 1)\n                                      :url/type :school}\n      :else {:url/page (first word-list)\n             :url/type :page})))\n\n(defn query-string->map [query-string]\n  (when (not (empty? query-string))\n      (->> (clj-str/split query-string #\"&\")\n           (filter #(clj-str/includes? % \"=\"))\n           (map #(clj-str/split % #\"=\"))\n           (reduce (fn [acc [k v]]\n                     (assoc acc (keyword \"url\" k) v)) {}))))\n\n(defn url->map [url query-string]\n  (merge (query-string->map query-string) (url->params url )))\n\n(comment\n  (= {:url/lang \"pt\", :url/city \"porto\"}\n     (url->map \"/cidades/porto/?lang=pt\" \"lang=pt\"))\n\n  (= {:url/lang \"pt\", :url/district \"porto\"}\n     (url->map \"/distritos/porto/?lang=pt\" \"lang=pt\"))\n\n  (= {:url/foo \"bar\" :url/lang \"pt\", :url/city \"porto\"}\n     (url->map \"/cidades/porto/?lang=pt&foo=bar\" \"lang=pt&foo=bar\"))\n\n  (= {:url/city \"porto\"}\n     (url->map \"/cidades/porto/\" \"\"))\n\n  (= {:url/page \"foo\"}\n     (url->map \"/foo\" \"\"))\n\n  (= {:url/home true}\n     (url->map \"/\" \"\")))\n"]}