{"version":3,"sources":["bb_passrates/frontend/autocomplete.cljs"],"mappings":";AAMA,qDAAA,rDAAMA;AAAN,AACE,IAAMC,MAAI,uBAAA,vBAAgBC;AAA1B,AACE,qBAAA,rBAAmBD;;AACnB,yBAAA,lBAAgBA;;AAEpB,wDAAA,xDAAME;AAAN,AACE,IAAMF,MAAI,uBAAA,vBAAgBC;AAA1B,AACE,qBAAA,rBAAmBD;;AACnB,yBAAA,lBAAgBA;;AAEpB,kDAAA,0DAAAG,5GAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;iBAAAA,bAA+DS;WAA/D,AAAAP,4CAAAF,eAAA,lEAA4BI;WAA5B,AAAAF,4CAAAF,eAAA,lEAAiCK;QAAjC,AAAAH,4CAAAF,eAAA,/DAAsCM;mBAAtC,AAAAJ,4CAAAF,eAAA,1EAAwCO;WAAxC,AAAAL,4CAAAF,eAAA,lEAAqDQ;AAArD,AACE,IAAME,KAAG,uBAAA,vBAAgBb;IACnBc,IAAE,uBAAA,vBAAgBd;IAClBe,QAAMR;AAFZ,AAGE,eAAA,fAAeO,sBAASH;;AACxB,CAAM,AAAaG,cAAG,mDAAA,wDAAA,9DAAKN,uDAAUO;;AACrC,AAAcF,eAAGC;;AACjB,OAAaD;;AAEjB,+DAAA,/DAAMG;AAAN,AAEE,IAAMC,iBAAe,uBAAA,vBAAgBjB;AAArC,AACE,oBAAI,kCAAA,lCAAW,AAAaiB;AAC1B,uCAAA,hCAAmBA;;AACnB,oCAAA,7BAAgBA;;;AAEtB,6DAAA,7DAAMC;AAAN,AACE,IAAMD,iBAAe,uBAAA,vBAAgBjB;AAArC,AACE,oCAAA,7BAAgBiB;;AAEpB,6DAAA,7DAAME;AAAN,AACE,IAAMF,iBAAe,uBAAA,vBAAgBjB;AAArC,AACE,uCAAA,hCAAmBiB;;AAEvB,+CAAA,/CAAMG,sGAAWC;AAAjB,AACE,IAAMC,eAAa,AAAA,AAAID;AAAvB,AACE,GAAI,iCAAA,hCAAG,AAACE,gBAAMD;AAEb,IAAME,iBAAe,uBAAA,vBAAgBxB;IAC9ByB,UAAQ,AAACC,4CAAIpB,gDAAa,AAACqB,0CAAiBC,kCAAON;AAD1D,AAGE,CAAM,AAAaE,2BAAgB,AAACK,kDAAa,kDAAA,lDAACC,uDAAeL;;AACjE,AAAC3B;;AACA,OAACoB;;AAEJ,AACE,AAACC;;AACD,OAAClB;;;AAER,sDAAA,tDAAM8B;AAAN,AACE,IAAMC,QAAM,uBAAA,vBAAgBhC;AAA5B,AACE,oBAAMgC;AAAN,AACE,QAAM,AAAWA,gBAAOZ;;AAD1B","names":["bb-passrates.frontend.autocomplete/hide-char-limit","box","js/document","bb-passrates.frontend.autocomplete/display-char-limit","p__19537","map__19538","cljs.core/--destructure-map","cljs.core.get","bb-passrates.frontend.autocomplete/dom-build-li","type","name","k","search-field","href","suggestion","li","a","label","bb-passrates.frontend.autocomplete/dom-toggle-search-wrapper","search-wrapper","bb-passrates.frontend.autocomplete/dom-show-search-wrapper","bb-passrates.frontend.autocomplete/dom-hide-search-wrapper","bb-passrates.frontend.autocomplete/on-key-fn","ev","query-string","cljs.core/count","suggestion-box","li-html","cljs.core.map","bb-passrates.shared.main/query-place-list","bb-passrates.shared.places/places","clojure.string.join","cljs.core.interpose","bb-passrates.frontend.autocomplete/autocomplete-cmp","input"],"sourcesContent":["(ns bb-passrates.frontend.autocomplete\n  (:require [clojure.string :as clj-str]\n            [bb-passrates.shared.places :refer [places]]\n            [bb-passrates.shared.main :refer [query-place-list seo lang]]\n            [bb-passrates.shared.copy :refer [copy-list]]))\n\n(defn hide-char-limit []\n  (let [box (.querySelector js/document \".char-limit\")]\n    (.classList.remove box \"show\")\n    (.classList.add box \"hidden\")))\n\n(defn display-char-limit []\n  (let [box (.querySelector js/document \".char-limit\")]\n    (.classList.remove box \"hidden\")\n    (.classList.add box \"show\")))\n\n(defn dom-build-li [{:keys [type name k search-field href] :as suggestion}]\n  (let [li (.createElement js/document \"li\")\n        a (.createElement js/document \"a\")\n        label type #_(get-in copy-list [(keyword \"autocomplete\" type) lang])]\n    (.setAttribute a \"href\" href)\n    (set! (.-innerText a) (str name \" (\" label \")\"))\n    (.appendChild li a)\n    (.-outerHTML li)))\n\n(defn dom-toggle-search-wrapper\n  []\n  (let [search-wrapper (.querySelector js/document \".search-wrapper .search-input\")]\n    (if (.contains (.-classList search-wrapper) \"active\")\n      (.classList.remove search-wrapper \"active\")\n      (.classList.add search-wrapper \"active\"))))\n\n(defn dom-show-search-wrapper []\n  (let [search-wrapper (.querySelector js/document \".search-wrapper .search-input\")]\n    (.classList.add search-wrapper \"active\")))\n\n(defn dom-hide-search-wrapper []\n  (let [search-wrapper (.querySelector js/document \".search-wrapper .search-input\")]\n    (.classList.remove search-wrapper \"active\")))\n\n(defn on-key-fn [ev]\n  (let [query-string (-> ev .-target .-value)]\n    (if (> (count query-string) 1)\n\n     (let [suggestion-box (.querySelector js/document \".search-input .autocomplete-box\")\n            li-html (map dom-build-li (query-place-list places query-string))]\n\n       (set! (.-innerHTML suggestion-box) (clj-str/join (interpose \"\\n\" li-html)))\n       (hide-char-limit)\n        (dom-show-search-wrapper))\n\n     (do\n       (dom-hide-search-wrapper)\n       (display-char-limit)))))\n\n(defn autocomplete-cmp []\n  (let [input (.querySelector js/document \".search-wrapper .search-input input\" )]\n    (when input\n      (set! (.-onkeyup input) on-key-fn))))\n"]}